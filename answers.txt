# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Matthew Allen Lin
Student ID: 904281426
Email: darthpwner@yahoo.com

# Partner 2 (if you're working in a team)
Name: Akhil Nadendla
Student ID: 504-331-555
Email: anadendla@g.ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
I had an issue "fatal-error-when-closing-sha1-file-input-output-error" when I was using Git.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

We implemented two methods of attacking: buffer overflow attacks and denial of
services (DOS) attacks.

The buffer overflow attack occurs when evil_mode is set to 1. We created a new
char array that is twice that size of FILENAMESIZE and use memset filled with
1's into our char array. We then write this into the buffer via osp2p_writef,
which will overflow the buffer since it has twice the number of characters
than we allocated as our buffer size.

Our DOS attack occurs when evil_mode is set to 2. We start by running a while
loop under the condition that evil_mode remains 2. Then, we assign a value for
"peer_fd" by calling open_socket using our address and port of our current
"peer_list". We check this value to see if it's -1; if it is, it's an error and
we repeatedly flood our peers with file requests, effectively denying the peers
of service.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
